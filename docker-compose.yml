services:

  postgres:
    image: postgres:15
    env_file: .env
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    networks:
      - wine-store-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB} -t 30"]
      interval: 3s
      timeout: 30s
      retries: 10
      start_period: 15s

  mongodb:
    image: mongo:6
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - wine-store-network
    ulimits:
      memlock:
        soft: -1
        hard: -1

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq-broker
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    # volumes:
    #   - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  product-service:
    build: ./product-service
    env_file: .env
    environment:
      - NODE_ENV=production
    ports:
      - "3001:3000"
    command: >
      sh -c "
      echo 'Waiting...';
      while ! psql postgresql://${PG_USER}:${PG_PASSWORD}@postgres:5432/${PG_DB} -c 'SELECT 1' >/dev/null 2>&1; do
        sleep 5;
      done;
      echo 'Executing migrations...';
      node src/db/migrations/001-initial-schema.js;
      echo 'Starting product service...';
      node src/app.js
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      args:
        - VITE_API_URL=${VITE_API_URL}
    ports:
      - "3000:80"
    depends_on:
      product-service:
        condition: service_healthy
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  mongodb_data:
  elastic_data:
  # rabbitmq_data:

networks:
  wine-store-network:
    driver: bridge