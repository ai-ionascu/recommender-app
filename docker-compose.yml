services:

  postgres:
    image: postgres:15
    container_name: postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    networks:
      - wine-store-network
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB} -t 5"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  mongodb:
    image: mongo:6
    container_name: mongodb
    command: ["--replSet", "rs0", "--bind_ip_all"]
    env_file: .env
    ports:
      - "27017:27017"
    volumes:
      - ./infra/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"try { rs.status().ok } catch(e) { 0 }\" | grep 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq-broker
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: appuser
      RABBITMQ_DEFAULT_PASS: appsecret
    ports:
      - "5672:5672" # AMQP protocol
      - "15672:15672" # Management UI
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-service:
    container_name: product-service
    build:
      context: .
      dockerfile: product-service/Dockerfile
    env_file: product-service/.env
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 3s
      retries: 10

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: frontend/Dockerfile
    env_file: frontend/.env
    depends_on:
      product-service:
        condition: service_healthy
    ports:
      - "3001:80"
    networks:
      - wine-store-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    container_name: auth-service
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    env_file:
      - auth-service/.env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4000:4000"
    networks:
      - wine-store-network
    volumes:
      - ./auth-service:/app
      - ./infra/init:/docker-entrypoint-initdb.d:ro
    working_dir: /app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  order-service:
      container_name: order-service
      build:
        context: .
        dockerfile: order-service/Dockerfile
      env_file: order-service/.env
      # volumes:
        # - ./order-service:/app
      # working_dir: /app 
      depends_on:
        product-service:
          condition: service_healthy
        auth-service:
          condition: service_healthy
        mongodb:
          condition: service_healthy
        rabbitmq:
          condition: service_healthy
      ports:
        - "4001:4001"
      networks:
        - wine-store-network
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
        interval: 10s
        timeout: 5s
        retries: 10

volumes:
  postgres_data:
  mongodb_data:
  # elastic_data:
  # rabbitmq_data:

networks:
  wine-store-network:
    driver: bridge